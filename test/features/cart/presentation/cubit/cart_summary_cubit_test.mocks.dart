// Mocks generated by Mockito 5.4.5 from annotations
// in scalable_ecommerce/test/features/cart/presentation/cubit/cart_summary_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:scalable_ecommerce/core/errors/failures.dart' as _i5;
import 'package:scalable_ecommerce/core/utils/app_logger.dart' as _i7;
import 'package:scalable_ecommerce/features/cart/domain/entities/cart_summary.dart'
    as _i6;
import 'package:scalable_ecommerce/features/cart/domain/usecases/calculate_cart_totals_usecase.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CalculateCartTotalsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalculateCartTotalsUseCase extends _i1.Mock
    implements _i3.CalculateCartTotalsUseCase {
  MockCalculateCartTotalsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.CartSummary>> call(
          _i3.CalculateCartTotalsParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.CartSummary>>.value(
            _FakeEither_0<_i5.Failure, _i6.CartSummary>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.CartSummary>>);
}

/// A class which mocks [AppLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLogger extends _i1.Mock implements _i7.AppLogger {
  MockAppLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get logFilePath => (super.noSuchMethod(
        Invocation.getter(#logFilePath),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#logFilePath),
        ),
      ) as String);

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void d(
    dynamic message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #d,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void i(
    dynamic message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #i,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void w(
    dynamic message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #w,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void e(
    dynamic message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #e,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void f(
    dynamic message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #f,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void v(
    dynamic message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #v,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logNetworkRequest({
    required String? method,
    required String? url,
    Map<String, dynamic>? headers,
    dynamic body,
    int? statusCode,
    String? responseBody,
    Duration? duration,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logNetworkRequest,
          [],
          {
            #method: method,
            #url: url,
            #headers: headers,
            #body: body,
            #statusCode: statusCode,
            #responseBody: responseBody,
            #duration: duration,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logUserAction(
    String? action, [
    Map<String, dynamic>? data,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #logUserAction,
          [
            action,
            data,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logBusinessLogic(
    String? operation,
    String? result, [
    Map<String, dynamic>? context,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #logBusinessLogic,
          [
            operation,
            result,
            context,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logPerformance(
    String? operation,
    Duration? duration, [
    Map<String, dynamic>? metrics,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #logPerformance,
          [
            operation,
            duration,
            metrics,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logCacheOperation(
    String? operation,
    String? key,
    bool? success, [
    String? details,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #logCacheOperation,
          [
            operation,
            key,
            success,
            details,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logAuth(
    String? operation,
    bool? success, [
    String? details,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #logAuth,
          [
            operation,
            success,
            details,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logStateChange(
    String? stateName,
    String? from,
    String? to, [
    Map<String, dynamic>? data,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #logStateChange,
          [
            stateName,
            from,
            to,
            data,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logErrorWithContext(
    String? context,
    Object? error,
    StackTrace? stackTrace, [
    Map<String, dynamic>? additionalData,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #logErrorWithContext,
          [
            context,
            error,
            stackTrace,
            additionalData,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> clearOldLogs() => (super.noSuchMethod(
        Invocation.method(
          #clearOldLogs,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getLogFileContent() => (super.noSuchMethod(
        Invocation.method(
          #getLogFileContent,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
}
